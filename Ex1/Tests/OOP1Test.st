TestCase subclass: #MonomTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Test'!!MonomTest methodsFor: 'as yet unclassified' stamp: 'VP 11/3/2017 12:36'!derivativeTest	"comment stating purpose of message"	| monom derivativeMonom |	monom := Monom new.	derivativeMonom := monom derivative.	self assert: (0 = (derivativeMonom exp)).	self assert: (0 = (derivativeMonom coef)).	monom coef: 42.	derivativeMonom := monom derivative.	self assert: (0 = (monom exp)).	self assert: (42 = (monom coef)).	self assert: (0 = (derivativeMonom exp)).	self assert: (0 = (derivativeMonom coef)).	monom coef: 42; exp: 1.	self assert: (0 = (derivativeMonom exp)).	self assert: (0 = (derivativeMonom coef)).	derivativeMonom := monom derivative.	self assert: (1 = (monom exp)).	self assert: (42 = (monom coef)).	self assert: (0 = (derivativeMonom exp)).	self assert: (42 = (derivativeMonom coef)).	monom coef: 42; exp: 23.	self assert: (0 = (derivativeMonom exp)).	self assert: (42 = (derivativeMonom coef)).	derivativeMonom := monom derivative.	self assert: (23 = (monom exp)).	self assert: (42 = (monom coef)).	self assert: (22 = (derivativeMonom exp)).	self assert: ((42*23) = (derivativeMonom coef)).	derivativeMonom :=  derivativeMonom derivative.	self assert: (23 = (monom exp)).	self assert: (42 = (monom coef)).	self assert: (21 = (derivativeMonom exp)).	self assert: ((42*23*22) = (derivativeMonom coef)).! !!MonomTest methodsFor: 'as yet unclassified' stamp: 'VP 11/3/2017 12:24'!expCoefTest	"comment stating purpose of message"	| monom |		monom := Monom new.		self assert: (0 = (monom exp)).	self assert: (0 = (monom coef)).	self should: [monom exp: '42'] raise: Error.	self should: [monom coef: '42'] raise: Error.	self should: [monom exp: -1] raise: Error.	self assert: (0 = (monom exp)).	self assert: (0 = (monom coef)).	monom exp: 42.	self assert: (42 = (monom exp)).	self assert: (0 = (monom coef)).	monom coef: 23.	self assert: (42 = (monom exp)).	self assert: (23 = (monom coef)).! !!MonomTest methodsFor: 'as yet unclassified' stamp: 'VP 11/4/2017 00:17'!testAdd	"comment stating purpose of message"	self derivativeTest.	self expCoefTest.! !TestCase subclass: #PolyStreamTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Test'!!PolyStreamTest methodsFor: 'as yet unclassified' stamp: 'VP 11/4/2017 00:56'!addCoefWithExpBlockTest	"comment stating purpose of message"	| polynom |	polynom := PolyStream new.	self should: [polynom addCoef: '23' withExp: 42] raise: Error.	self should: [polynom addCoef: 23 withExp: '42'] raise: Error.	self should: [polynom addCoef: 23 withExp: -42] raise: Error.	self assert: ((polynom block) isKindOf: BlockClosure).	self assert: (0 = (polynom eval: 42)).	polynom addCoef: 2 withExp: 3.	self assert: (250 = (polynom eval: 5)).	polynom addCoef: 5 withExp: 3.	self assert: (875 = (polynom eval: 5)).	polynom addCoef: 2 withExp: 5.	self assert: (7125 = (polynom eval: 5)).! !!PolyStreamTest methodsFor: 'as yet unclassified' stamp: 'VP 11/4/2017 16:21'!addTest	"comment stating purpose of message"	| polynomA polynomB set|	polynomA := PolyStream new addCoef: 1 withExp: 0; addCoef: 3 withExp: 2; addCoef: 5 withExp: 6.	self should: [polynomA add: 42] raise: Error.	self should: [polynomA substitute: 0 ] raise: Error.	self should: [polynomA substitute: '42' ] raise: Error.	self assert: (1 = (polynomA eval: 0)).	self assert: (9 = (polynomA eval: 1)). 	self assert: (9 = (polynomA eval: -1)).		self assert: (333 = (polynomA eval: 2)). 	self assert: (333 = (polynomA eval: -2)).		polynomB := PolyStream new addCoef: 7 withExp: 2; addCoef: 8 withExp: 9.	self assert: (0 = (polynomB eval: 0)).	self assert: (15 = (polynomB eval: 1)). 	self assert: (-1 = (polynomB eval: -1)).		self assert: (4124 = (polynomB eval: 2)). 	self assert: (-4068 = (polynomB eval: -2)).		polynomA add: polynomB. "1 + 10*x^2 + 5*x^6  +8*x^9"	self assert: (1 = (polynomA eval: 0)).	self assert: (24 = (polynomA eval: 1)). 	self assert: (8 = (polynomA eval: -1)).		self assert: (4457 = (polynomA eval: 2)). 	self assert: (-3735 = (polynomA eval: -2)).		polynomA substitute: 4. 	self assert: (1 = (polynomA eval: 0)).	self assert: (2117793 = (polynomA eval: 1)). 	self assert: (-2076511 = (polynomA eval: -1)).		self assert: (1075053185 = (polynomA eval: 2)). 	self assert: (-1072430463 = (polynomA eval: -2)).	polynomA multiplyBy: 3.		self assert: (3 = (polynomA eval: 0)).	self assert: (6353379 = (polynomA eval: 1)). 	self assert: (-6229533 = (polynomA eval: -1)).		self assert: (3225159555 = (polynomA eval: 2)). 	self assert: (-3217291389 = (polynomA eval: -2)).	set := {2. 9} asSet.	polynomA filter: set.	self assert: (3 = (polynomA eval: 0)).	self assert: (61443 = (polynomA eval: 1)). 	self assert: (61443 = (polynomA eval: -1)).		self assert: (3932163 = (polynomA eval: 2)). 	self assert: (3932163 = (polynomA eval: -2)).	set remove: 2.	self assert: (3 = (polynomA eval: 0)).	self assert: (61443 = (polynomA eval: 1)). 	self assert: (61443 = (polynomA eval: -1)).		self assert: (3932163 = (polynomA eval: 2)). 	self assert: (3932163 = (polynomA eval: -2)).	set add: 6.	self assert: (3 = (polynomA eval: 0)).	self assert: (61443 = (polynomA eval: 1)). 	self assert: (61443 = (polynomA eval: -1)).		self assert: (3932163 = (polynomA eval: 2)). 	self assert: (3932163 = (polynomA eval: -2)).	polynomA addCoef: 7 withExp: 2.	self assert: (3 = (polynomA eval: 0)).	self assert: (61450 = (polynomA eval: 1)). 	self assert: (61450 = (polynomA eval: -1)).		self assert: (3932191 = (polynomA eval: 2)). 	self assert: (3932191 = (polynomA eval: -2)).	! !!PolyStreamTest methodsFor: 'as yet unclassified' stamp: 'VP 11/12/2017 22:42'!filterTest	"comment stating purpose of message"		| polynom1 set |	polynom1 := PolyStream new addCoef: 1 withExp: 2; addCoef: 3 withExp: 4; addCoef: 5 withExp: 6.	self assert: ((polynom1 eval: 0) = 0).	self assert: ((polynom1 eval: 1) = 9).	self assert: ((polynom1 eval: 2) = 372).	self assert: ((polynom1 eval: 3) = 3897).	set := {2 . 3} asSet.	polynom1 filter: set.	self assert: ((polynom1 eval: 0) = 0).	self assert: ((polynom1 eval: 1) = 8).	self assert: ((polynom1 eval: 2) = 368).	self assert: ((polynom1 eval: 3) = 3888).	set := {3 . 4} asSet.	polynom1 filter: set.	self assert: ((polynom1 eval: 0) = 0).	self assert: ((polynom1 eval: 1) = 5).	self assert: ((polynom1 eval: 2) = 320).	self assert: ((polynom1 eval: 3) = 3645).	set := {5 . 6} asSet.	polynom1 filter: set.	self assert: ((polynom1 eval: 0) = 0).	self assert: ((polynom1 eval: 1) = 0).	self assert: ((polynom1 eval: 2) = 0).	self assert: ((polynom1 eval: 3) = 0).	! !!PolyStreamTest methodsFor: 'as yet unclassified' stamp: 'VP 11/4/2017 19:04'!itersectionWithTest	| b p1 p2 bValue|		p1 := PolyStream new addCoef: -1 withExp: 2; addCoef: 6 withExp: 0.	self should: [p1 intersectionWith: 42 withinRange: 2.] raise: Error.	self should: [p1 intersectionWith: 42 withinRange: 2.] raise: Error.	p2 := PolyStream new addCoef: -1 withExp: 1.	b := p1 intersectionWith: p2 withinRange: 2.	bValue := 'wait for it...'.	[bValue = 'wait for it...']		whileTrue: [			bValue := (b value).		].	self assert: (-2 = bValue).		b := p1 intersectionWith: p2 withinRange: 1.	self assert: ('wait for it...' = (b value)).	self assert: ('wait for it...' = (b value)).	self assert: ('wait for it...' = (b value)).	self should: [b value] raise: Error.		p1 := PolyStream new addCoef: 1 withExp: 3; addCoef: 50 withExp: 0.	p2 := PolyStream new addCoef: 6 withExp: 2; addCoef: 45 withExp: 1.	b := p1 intersectionWith: p2 withinRange: 9.		bValue := 'wait for it...'.	[bValue = 'wait for it...']		whileTrue: [			bValue := (b value).		].	self assert: (1 == bValue).	! !!PolyStreamTest methodsFor: 'as yet unclassified' stamp: 'VP 11/12/2017 22:29'!testAdd	"comment stating purpose of message"	self addCoefWithExpBlockTest.	self addTest.	self itersectionWithTest.	self filterTest.! !TestCase subclass: #PolynomTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Test'!!PolynomTest methodsFor: 'as yet unclassified' stamp: 'VP 11/3/2017 12:47'!addMonomTest	"comment stating purpose of message"	| polynom monom |	polynom := Polynom new.	self assert: (0 = (polynom eval: 0)).	self assert: (0 = (polynom eval: 17)).	self assert: (0 = (polynom eval: -17)).	self assert: (0 = (polynom eval: 23)).	self assert: (0 = (polynom eval: -23)).	self assert: (0 = (polynom eval: 42)).	self assert: (0 = (polynom eval: -42)).	self should: [polynom addMonom: 42] raise: Error.		monom := Monom new.	polynom addMonom: monom.	self assert: (0 = (polynom eval: 0)).	self assert: (0 = (polynom eval: 17)).	self assert: (0 = (polynom eval: -17)).	self assert: (0 = (polynom eval: 23)).	self assert: (0 = (polynom eval: -23)).	self assert: (0 = (polynom eval: 42)).	self assert: (0 = (polynom eval: -42)).	monom exp: 23; coef: 42.	self assert: (0 = (polynom eval: 0)).	self assert: (0 = (polynom eval: 17)).	self assert: (0 = (polynom eval: -17)).	self assert: (0 = (polynom eval: 23)).	self assert: (0 = (polynom eval: -23)).	self assert: (0 = (polynom eval: 42)).	self assert: (0 = (polynom eval: -42)).	polynom addMonom: monom.	self assert: (0 = (polynom eval: 0)).	self assert: (352321536 = (polynom eval: 2)).	self assert: (-352321536 = (polynom eval: -2)).	monom exp: 0; coef: 23.	self assert: (0 = (polynom eval: 0)).	self assert: (352321536 = (polynom eval: 2)).	self assert: (-352321536 = (polynom eval: -2)).	polynom addMonom: monom.	self assert: (23 = (polynom eval: 0)).	self assert: (352321559 = (polynom eval: 2)).	self assert: (-352321513 = (polynom eval: -2)).	! !!PolynomTest methodsFor: 'as yet unclassified' stamp: 'VP 11/12/2017 21:27'!asDictionaryTest	"comment stating purpose of message"	| polynom dictionary polynomDerivative polynomSum|		polynom := Polynom new.	dictionary := polynom asDictionary.		self assert: (dictionary isKindOf: Dictionary).	self assert: (dictionary isEmpty).		polynom addMonom: (Monom new coef: 1; exp: 0).	self assert: (dictionary isKindOf: Dictionary).	self assert: (dictionary isEmpty).	dictionary := polynom asDictionary.	self assert: (dictionary isKindOf: Dictionary).	self assert: ((dictionary size) = 1).	self assert: ((dictionary at: 0 ) = 1).	dictionary at: 42 put: 23.	polynom multiplyByMonom: (Monom new coef: 1; exp: 4).	self assert: (dictionary isKindOf: Dictionary).	self assert: ((dictionary size) = 2).	self assert: ((dictionary at: 0 ) = 1).	self assert: ((dictionary at: 42 ) = 23).	dictionary := polynom asDictionary.	self assert: (dictionary isKindOf: Dictionary).	self assert: ((dictionary size) = 1).	self assert: ((dictionary at: 4) = 1).		polynom addMonom: (Monom new coef: 2; exp: 0).	self assert: (dictionary isKindOf: Dictionary).	self assert: ((dictionary size) = 1).	self assert: ((dictionary at: 4) = 1).		dictionary := polynom asDictionary.	self assert: (dictionary isKindOf: Dictionary).	self assert: ((dictionary size) = 2).	self assert: ((dictionary at: 0) = 2).	self assert: ((dictionary at: 4) = 1).		polynom addMonom: (Monom new coef: 42; exp: 4).	dictionary := polynom asDictionary.	self assert: (dictionary isKindOf: Dictionary).	self assert: ((dictionary size) = 2).	self assert: ((dictionary at: 0) = 2).	self assert: ((dictionary at: 4) = 43).		polynom multiplyByMonom: (Monom new coef: 2).	dictionary := polynom asDictionary.	self assert: (dictionary isKindOf: Dictionary).	self assert: ((dictionary size) = 2).	self assert: ((dictionary at: 0) = 4).	self assert: ((dictionary at: 4) = 86).		polynomDerivative := polynom derivative.	dictionary := polynomDerivative asDictionary.	self assert: (dictionary isKindOf: Dictionary).	self assert: ((dictionary size) = 1).	self assert: ((dictionary at: 3) = 344).		polynomSum := polynom add: polynomDerivative.	dictionary := polynomSum asDictionary.	self assert: (dictionary isKindOf: Dictionary).	self assert: ((dictionary size) = 3).	self assert: ((dictionary at: 0) = 4).	self assert: ((dictionary at: 3) = 344).	self assert: ((dictionary at: 4) = 86).		polynom := Polynom new addMonom: (Monom new coef: -4; exp: 0); addMonom: (Monom new coef: -344; exp: 3); addMonom: (Monom new coef: -86; exp: 4).	polynomSum := polynomSum add: polynom.	dictionary := polynomSum asDictionary.	self assert: (dictionary isEmpty).	polynomSum := polynomSum addMonom: (Monom new coef: 42; exp: 23).	polynomSum := polynomSum addMonom: (Monom new coef: -42; exp: 23).	dictionary := polynomSum asDictionary.	self assert: (dictionary isEmpty).	! !!PolynomTest methodsFor: 'as yet unclassified' stamp: 'VP 11/3/2017 22:58'!derivativeEvalTest	"comment stating purpose of message"	| polynom derivativePolynom dictionary derivativeDictionary|		polynom := Polynom new.		self should: [polynom eval: '42'] raise: Error.		dictionary := polynom asDictionary.	derivativePolynom := polynom derivative.	derivativeDictionary := derivativePolynom asDictionary.	self assert: (dictionary isEmpty).	self assert: (derivativeDictionary isEmpty).	self assert: (0 = (polynom eval: 0)).	self assert: (0 = (polynom eval: 1)).	self assert: (0 = (polynom eval: -1)).	self assert: (0 = (polynom eval: 2)).	self assert: (0 = (polynom eval: -2)).	self assert: (0 = (derivativePolynom eval: 0)).	self assert: (0 = (derivativePolynom eval: 1)).	self assert: (0 = (derivativePolynom eval: -1)).	self assert: (0 = (derivativePolynom eval: 2)).	self assert: (0 = (derivativePolynom eval: -2)).	polynom addMonom: (Monom new coef: 42).	dictionary := polynom asDictionary.	derivativePolynom := polynom derivative.	derivativeDictionary := derivativePolynom asDictionary.	self assert: (1 = (dictionary size)).	self assert: (42 = (dictionary at: 0)).	self assert: (derivativeDictionary isEmpty).	self assert: (42 = (polynom eval: 0)).	self assert: (42 = (polynom eval: 1)).	self assert: (42 = (polynom eval: -1)).	self assert: (42 = (polynom eval: 2)).	self assert: (42 = (polynom eval: -2)).	self assert: (0 = (derivativePolynom eval: 0)).	self assert: (0 = (derivativePolynom eval: 1)).	self assert: (0 = (derivativePolynom eval: -1)).	self assert: (0 = (derivativePolynom eval: 2)).	self assert: (0 = (derivativePolynom eval: -2)).	polynom addMonom: (Monom new coef: 23; exp: 3).	dictionary := polynom asDictionary.	derivativePolynom := polynom derivative.	derivativeDictionary := derivativePolynom asDictionary.	self assert: (2 = (dictionary size)).	self assert: (42 = (dictionary at: 0)).	self assert: (23 = (dictionary at: 3)).	self assert: (1 = (derivativeDictionary size)).	self assert: (69 = (derivativeDictionary at: 2)).	self assert: (42 = (polynom eval: 0)).	self assert: (65 = (polynom eval: 1)).	self assert: (19 = (polynom eval: -1)).	self assert: (226 = (polynom eval: 2)).	self assert: (-142 = (polynom eval: -2)).	self assert: (0 = (derivativePolynom eval: 0)).	self assert: (69 = (derivativePolynom eval: 1)).	self assert: (69 = (derivativePolynom eval: -1)).	self assert: (276 = (derivativePolynom eval: 2)).	self assert: (276 = (derivativePolynom eval: -2)).	derivativePolynom := derivativePolynom derivative.	derivativeDictionary := derivativePolynom asDictionary.	self assert: (1 = (derivativeDictionary size)).	self assert: (138 = (derivativeDictionary at: 1)).	derivativePolynom := derivativePolynom derivative.	derivativeDictionary := derivativePolynom asDictionary.	self assert: (1 = (derivativeDictionary size)).	self assert: (138 = (derivativeDictionary at: 0)).	derivativePolynom := derivativePolynom derivative.	derivativeDictionary := derivativePolynom asDictionary.	self assert: (derivativeDictionary isEmpty).	polynom addMonom: (Monom new coef: 17; exp: 7).	dictionary := polynom asDictionary.	derivativePolynom := polynom derivative.	derivativeDictionary := derivativePolynom asDictionary.	self assert: (3 = (dictionary size)).	self assert: (42 = (dictionary at: 0)).	self assert: (23 = (dictionary at: 3)).	self assert: (17 = (dictionary at: 7)).	self assert: (2 = (derivativeDictionary size)).	self assert: (69 = (derivativeDictionary at: 2)).	self assert: (119 = (derivativeDictionary at: 6)).	self assert: (42 = (polynom eval: 0)).	self assert: (82 = (polynom eval: 1)).	self assert: (2 = (polynom eval: -1)).	self assert: (2402 = (polynom eval: 2)).	self assert: (-2318 = (polynom eval: -2)).	derivativePolynom := derivativePolynom derivative.	derivativeDictionary := derivativePolynom asDictionary.	self assert: (3 = (dictionary size)).	self assert: (42 = (dictionary at: 0)).	self assert: (23 = (dictionary at: 3)).	self assert: (17 = (dictionary at: 7)).	self assert: (2 = (derivativeDictionary size)).	self assert: (138 = (derivativeDictionary at: 1)).	self assert: (714 = (derivativeDictionary at: 5)).	derivativePolynom := derivativePolynom derivative.	derivativeDictionary := derivativePolynom asDictionary.	self assert: (3 = (dictionary size)).	self assert: (42 = (dictionary at: 0)).	self assert: (23 = (dictionary at: 3)).	self assert: (17 = (dictionary at: 7)).	self assert: (2 = (derivativeDictionary size)).	self assert: (138 = (derivativeDictionary at: 0)).	self assert: (3570 = (derivativeDictionary at: 4)).	derivativePolynom := derivativePolynom derivative.	derivativeDictionary := derivativePolynom asDictionary.	self assert: (3 = (dictionary size)).	self assert: (42 = (dictionary at: 0)).	self assert: (23 = (dictionary at: 3)).	self assert: (17 = (dictionary at: 7)).	self assert: (1 = (derivativeDictionary size)).	self assert: (14280 = (derivativeDictionary at: 3)).	derivativePolynom := derivativePolynom derivative.	derivativeDictionary := derivativePolynom asDictionary.	self assert: (3 = (dictionary size)).	self assert: (42 = (dictionary at: 0)).	self assert: (23 = (dictionary at: 3)).	self assert: (17 = (dictionary at: 7)).	self assert: (1 = (derivativeDictionary size)).	self assert: (42840 = (derivativeDictionary at: 2)).	derivativePolynom := derivativePolynom derivative.	derivativeDictionary := derivativePolynom asDictionary.	self assert: (3 = (dictionary size)).	self assert: (42 = (dictionary at: 0)).	self assert: (23 = (dictionary at: 3)).	self assert: (17 = (dictionary at: 7)).	self assert: (1 = (derivativeDictionary size)).	self assert: (85680 = (derivativeDictionary at: 1)).	derivativePolynom := derivativePolynom derivative.	derivativeDictionary := derivativePolynom asDictionary.	self assert: (3 = (dictionary size)).	self assert: (42 = (dictionary at: 0)).	self assert: (23 = (dictionary at: 3)).	self assert: (17 = (dictionary at: 7)).	self assert: (1 = (derivativeDictionary size)).	self assert: (85680 = (derivativeDictionary at: 0)).	derivativePolynom := derivativePolynom derivative.	derivativeDictionary := derivativePolynom asDictionary.	self assert: (3 = (dictionary size)).	self assert: (42 = (dictionary at: 0)).	self assert: (23 = (dictionary at: 3)).	self assert: (17 = (dictionary at: 7)).	self assert: (0 = (derivativeDictionary size)).			! !!PolynomTest methodsFor: 'as yet unclassified' stamp: 'VP 11/3/2017 20:48'!multiplyByMonomTest	"comment stating purpose of message"	| polynom monom |	polynom := Polynom new.	monom := Monom new.	self should: [polynom multiplyByMonom: 42] raise: Error.	self assert: (0 = (polynom eval: 42)).	polynom multiplyByMonom: monom. 	self assert: (0 = monom exp).	self assert: (0 = monom coef).	self assert: (0 = (polynom eval: 42)).	monom exp: 3.	self assert: (3 = monom exp).	self assert: (0 = monom coef).	self assert: (0 = (polynom eval: 42)).	polynom multiplyByMonom: monom. 	self assert: (3 = monom exp).	self assert: (0 = monom coef).	self assert: (0 = (polynom eval: 42)).	monom coef: 7.	self assert: (3 = monom exp).	self assert: (7 = monom coef).	self assert: (0 = (polynom eval: 42)).	polynom multiplyByMonom: monom. 	self assert: (3 = monom exp).	self assert: (7 = monom coef).	self assert: (0 = (polynom eval: 42)).	polynom addMonom: monom. 	self assert: (3 = monom exp).	self assert: (7 = monom coef).	self assert: (34391 = (polynom eval: 17)).	monom exp: 0; coef: 2.	self assert: (0 = monom exp).	self assert: (2 = monom coef).	self assert: (34391 = (polynom eval: 17)).	self assert: (15379 = (polynom eval: 13)).	polynom multiplyByMonom: monom. 	self assert: (0 = monom exp).	self assert: (2 = monom coef).	self assert: (30758 = (polynom eval: 13)).	polynom addMonom: monom.	self assert: (0 = monom exp).	self assert: (2 = monom coef).	self assert: (30760 = (polynom eval: 13)). 	monom exp: 2; coef: 3.	self assert: (2 = monom exp).	self assert: (3 = monom coef).	self assert: (30760 = (polynom eval: 13)). 	self assert: (380 = (polynom eval: 3)).	polynom multiplyByMonom: monom. 	self assert: (2 = monom exp).	self assert: (3 = monom coef).	self assert: (10260 = (polynom eval: 3)). 	polynom addMonom: monom. 	self assert: (2 = monom exp).	self assert: (3 = monom coef).	self assert: (10287 = (polynom eval: 3)). 	monom exp: 1; coef: 2.	self assert: (1 = monom exp).	self assert: (2 = monom coef).	self assert: (10287 = (polynom eval: 3)).	polynom multiplyByMonom: monom.  	self assert: (1 = monom exp).	self assert: (2 = monom coef).	self assert: (61722 = (polynom eval: 3)).	 	! !!PolynomTest methodsFor: 'as yet unclassified' stamp: 'VP 11/4/2017 00:22'!testAdd	"comment stating purpose of message"	self addMonomTest.	self asDictionaryTest.	self derivativeEvalTest.	self multiplyByMonomTest.! !