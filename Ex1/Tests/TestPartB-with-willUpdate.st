'From Squeak5.1 of 25 September 2018 [latest update: #16553] on 9 November 2018 at 3:59:08 pm'!TestCase subclass: #TestPartB	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1-GilShlomi-Test'!!TestPartB methodsFor: 'Tests' stamp: 'HW1 8/6/2018 21:38'!testPartB_ADD	| p p2|		p:= PolyStream new.	[p add: 0.5] on: Error 	do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])]."----------------------------------------------------------"	p:= PolyStream new.	p2:= PolyStream new.	p2 addCoef: 2 withExp: 2.	p add: p2.	self assert: ((p eval: 3) = 18)."----------------------------------------------------------"	p:= PolyStream new.	p2:= PolyStream new.	p addCoef: 1 withExp: 1.	p addCoef: 2 withExp: 2.	p2 addCoef: 2 withExp: 2.		p add: p2.	self assert: ((p eval: 3) = 39)."----------------------------------------------------------"	p:= PolyStream new.	p2:= PolyStream new.	p addCoef: 1 withExp: 1.	p addCoef: 2 withExp: 2.	p2 addCoef: 1 withExp: 1.	p2 addCoef: 2 withExp: 2.		p add: p2.	self assert: ((p eval: 3) = 42)."----------------------------------------------------------"! !!TestPartB methodsFor: 'Tests' stamp: 'HW1 8/6/2018 21:31'!testPartB_ADDCOEF_WITHEXP	|ps exp coef|	ps := PolyStream new.		exp := 2. coef := 0.5.	[ps addCoef: coef withExp: exp] on: Error do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].	exp :=-2. coef := 2.	[ps addCoef: coef withExp: exp] on: Error do: [:e | (e asString = 'Error: invalid input') ifFalse: [Transcript showln: e asString]].	exp := 0.5. coef := 2.	[ps addCoef: coef withExp: exp] on: Error do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].	exp := -0.5.	[ps addCoef: coef withExp: exp] on: Error do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].	coef := -0.5.	[ps addCoef: coef withExp: exp] on: Error do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].		exp := 0. coef := -2.	ps addCoef: coef withExp: exp.		self assert: ((ps eval: 3) = -2).	"================================================================""================================================================"		ps := PolyStream new.	exp := 2.	ps addCoef: coef withExp: exp.		self assert: ((ps eval: 3) = -18)."================================================================""================================================================"	ps := PolyStream new.	exp := 2. coef := 2.	ps addCoef: coef withExp: exp.		coef := 3. 	ps addCoef: coef withExp: exp.		self assert: ((ps eval: 3) = 45).	"================================================================""================================================================"		ps := PolyStream new.	exp := 2. coef := 2.	ps addCoef: coef withExp: exp.		exp := 3. coef := -3. 	ps addCoef: coef withExp: exp.		self assert: ((ps eval: 3) = -63).	"================================================================""================================================================"	ps := PolyStream new.	exp := 0. coef := 2.	ps addCoef: coef withExp: exp.		exp := 3. coef := -3. 	ps addCoef: coef withExp: exp.		self assert: ((ps eval: 3) = -79).	"================================================================""================================================================"	ps := PolyStream new.	exp := 2. coef := 2.	ps addCoef: coef withExp: exp.		exp := 3. coef := 0. 	ps addCoef: coef withExp: exp.		self assert: ((ps eval: 3) = 18).	"================================================================""================================================================"	ps := PolyStream new.	exp := 2. coef := 0.	ps addCoef: coef withExp: exp.		exp := 3. coef := 0. 	ps addCoef: coef withExp: exp.		self assert: ((ps eval: 3) = 0). 	coef := 4.	self assert: ((ps eval: 3) = 0). ! !!TestPartB methodsFor: 'Tests' stamp: 'HW1 8/6/2018 21:35'!testPartB_FILTER	| p s |			p:= PolyStream new.	s := Set new.	p addCoef: 2 withExp: 2.	[p filter: 0.5] on: Error 	do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].	"----------------------------------------------------------"		p:= PolyStream new.	s := Set new.	p addCoef: 2 withExp: 2.	s add: 2.	p filter: s.	self assert: ((p eval: 3) = 0).	"----------------------------------------------------------"		p:= PolyStream new.	s := Set new.	p addCoef: 2 withExp: 2.	p addCoef: 2 withExp: 3.	s add: 2.	p filter: s.	self assert: ((p eval: 3) = 54).	"----------------------------------------------------------"		p:= PolyStream new.	s := Set new.	p addCoef: 2 withExp: 2.	p addCoef: 2 withExp: 3.	s add: 2.	s add: 3.	p filter: s.	self assert: ((p eval: 3) = 0).	"----------------------------------------------------------"		p:= PolyStream new.	s := Set new.	p addCoef: 2 withExp: 2.	p addCoef: 2 withExp: 3.	s add: 2.	s add: 3.	p filter: s.		p addCoef: 3 withExp: 2.		self assert: ((p eval: 3) = 27).	"----------------------------------------------------------"		p:= PolyStream new.	s := Set new.	p addCoef: 2 withExp: 2.	p addCoef: 2 withExp: 3.	s add: 2.	s add: 3.	p filter: s.		p addCoef: 3 withExp: 2.	s := Set new.	s add: 2.	p filter: s.	self assert: ((p eval: 3) = 0).	"----------------------------------------------------------"		p:= PolyStream new.	s := Set new.	p addCoef: 2 withExp: 2.	p addCoef: 2 withExp: 3.	p addCoef: 3 withExp: 5.	s add: 2.	s add: 3.	p filter: s.		p addCoef: 3 withExp: 2.	s := Set new.	s add: 5.	p filter: s.		self assert: ((p eval: 3) = 27).	"----------------------------------------------------------"! !!TestPartB methodsFor: 'Tests' stamp: '3 11/9/2018 15:55'!testPartB_INTERSECTION	| p p2 block|			p:= PolyStream new.	p2:= PolyStream new.		p addCoef: 1 withExp: 2.	p addCoef: -1 withExp: 1.		p2 addCoef: 1 withExp: 1.	block := p intersectionWith: p2 withinRange: 1 willUpdate: false.	self assert: ((block value) = 0).	"----------------------------------------------------------"			p:= PolyStream new.	p2:= PolyStream new.		p addCoef: 1 withExp: 2.	p addCoef: -3 withExp: 1.	p addCoef: 2 withExp: 0.		p2 addCoef: 1 withExp: 2.	p2 addCoef: -1 withExp: 1.	p2 addCoef: -2 withExp: 0.	block := p intersectionWith: p2 withinRange: 1 willUpdate: false.	self assert: ((block value) = 'wait for it...').	self assert: ((block value) = 'wait for it...').	self assert: ((block value) = 'wait for it...').	[block value] on: Error 	do: [:e | (e asString = 'Error: error raised' ifFalse: [Transcript showln: e asString])].	"----------------------------------------------------------"			p:= PolyStream new.	p2:= PolyStream new.		p addCoef: 1 withExp: 3.	p addCoef: -6 withExp: 2.	p addCoef: 11 withExp: 1.	p addCoef: -6 withExp: 0.		p2 addCoef: 1 withExp: 2.	p2 addCoef: -3 withExp: 1.	p2 addCoef: 2 withExp: 0.	block := p intersectionWith: p2 withinRange: 2 willUpdate: false.	self assert: ((block value) = 'wait for it...').	self assert: ((block value) = 1).	"----------------------------------------------------------"		p:= PolyStream new.	p2:= PolyStream new.		p addCoef: 1 withExp: 1.	p addCoef: 1 withExp: 0.		p2 addCoef: 1 withExp: 2.	p2 addCoef: -1 withExp: 1.	p2 addCoef: -2 withExp: 0.	block := p intersectionWith: p2 withinRange: 3 willUpdate: false.	self assert: ((block value) = 'wait for it...').	self assert: ((block value) = 'wait for it...').	self assert: ((block value) = -1).	"----------------------------------------------------------"		p:= PolyStream new.	p2:= PolyStream new.		p addCoef: 1 withExp: 1.	p addCoef: 1 withExp: 0.		p2 addCoef: 1 withExp: 2.	p2 addCoef: -1 withExp: 1.	p2 addCoef: -2 withExp: 0.	[p intersectionWith: p2 withinRange: 0.5 willUpdate: false.] on: Error 	do: [:e | (e asString = 'Error: error raised' ifFalse: [Transcript showln: e asString])].	"----------------------------------------------------------"		p:= PolyStream new.	p2:= PolyStream new.		[p intersectionWith: 0.5 withinRange: 2 willUpdate: false.] on: Error 	do: [:e | (e asString = 'Error: error raised' ifFalse: [Transcript showln: e asString])].	"----------------------------------------------------------"		p:= PolyStream new.	p2:= PolyStream new.		p addCoef: 1 withExp: 1.	p addCoef: 1 withExp: 0.		p2 addCoef: 1 withExp: 2.	p2 addCoef: -1 withExp: 1.	p2 addCoef: -2 withExp: 0.		block := p intersectionWith: p2 withinRange: 3 willUpdate: false.		p addCoef: 4 withExp: 5.	p2 addCoef: -3 withExp: 6.	"p and p2 not changed"		self assert: ((block value) = 'wait for it...').	self assert: ((block value) = 'wait for it...').	self assert: ((block value) = -1).	"----------------------------------------------------------"	p:= PolyStream new.	p2:= PolyStream new.		p addCoef: 1 withExp: 2.	p2 addCoef: 1 withExp: 1.	p2 addCoef: -1 withExp: 0.		block := p intersectionWith: p2 withinRange: 3 willUpdate: true.		self assert: ((block value) = 'wait for it...').		p addCoef: -1 withExp: 0.	self assert: ((block value) = 1).	"----------------------------------------------------------"	p:= PolyStream new.	p2:= PolyStream new.		p addCoef: 1 withExp: 2.	p2 addCoef: 1 withExp: 1.	p2 addCoef: -1 withExp: 0.		block := p intersectionWith: p2 withinRange: 3 willUpdate: true.		p addCoef: -1 withExp: 0.	self assert: ((block value) = 0)."----------------------------------------------------------"! !!TestPartB methodsFor: 'Tests' stamp: 'HW1 8/6/2018 21:40'!testPartB_MULTIPLYBY	| p |			p:= PolyStream new.	p addCoef: 2 withExp: 2.	[p multiplyBy: 0.5] on: Error 	do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])]."----------------------------------------------------------"		p:= PolyStream new.	p addCoef: 2 withExp: 2.	p multiplyBy: 0.	self assert: ((p eval: 3) = 0).	"----------------------------------------------------------"		p:= PolyStream new.	p addCoef: 2 withExp: 2.	p multiplyBy: 2.	self assert: ((p eval: 3) = 36).	"----------------------------------------------------------"		p:= PolyStream new.	p addCoef: 2 withExp: 2.	p multiplyBy: -2.	self assert: ((p eval: 3) = -36).	"----------------------------------------------------------"		p:= PolyStream new.	p addCoef: 2 withExp: 3.	p multiplyBy: -2.	self assert: ((p eval: 3) = -108).	"----------------------------------------------------------"		p:= PolyStream new.	p addCoef: 0 withExp: 2.	p multiplyBy: 2.	self assert: ((p eval: 3) = 0).	"----------------------------------------------------------"		p:= PolyStream new.	p addCoef: 1 withExp: 0.	p multiplyBy: 2.	self assert: ((p eval: 3) = 2).	"----------------------------------------------------------"		p:= PolyStream new.	p addCoef: 2 withExp: 3.	p addCoef: 2 withExp: 2.	p multiplyBy: -2.	self assert: ((p eval: 3) = -144).	"----------------------------------------------------------"! !!TestPartB methodsFor: 'Tests' stamp: 'HW1 8/6/2018 21:44'!testPartB_SUBSTITUTE	| p |			p:= PolyStream new.	p addCoef: 2 withExp: 2.	[p substitute: 0] on: Error 	do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])]."----------------------------------------------------------"		p:= PolyStream new.	p addCoef: 2 withExp: 2.	[p substitute: 0.5] on: Error 	do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])]."----------------------------------------------------------"		p:= PolyStream new.	p addCoef: 2 withExp: 2.	p substitute: 2.	self assert: ((p eval: 3) = 72)."----------------------------------------------------------"		p:= PolyStream new.	p addCoef: 2 withExp: 2.	p substitute: -2.	self assert: ((p eval: 3) = 72)."----------------------------------------------------------"		p:= PolyStream new.	p addCoef: 2 withExp: 3.	p substitute: -2.	self assert: ((p eval: 3) = -432)."----------------------------------------------------------"		p:= PolyStream new.	p addCoef: 2 withExp: 3.	p addCoef: 2 withExp: 2.	p substitute: -2.	self assert: ((p eval: 3) = -360).	"----------------------------------------------------------"! !