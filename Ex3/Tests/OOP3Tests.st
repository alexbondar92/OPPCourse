'From Squeak5.2 of 13 December 2018 [latest update: #18225] on 3 December 2018 at 7:05:19 pm'!TestCase subclass: #OOP3Tests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP3SanityTests'!!OOP3Tests methodsFor: 'testing' stamp: 'BT 12/3/2018 11:42'!setUpMyObject instVarNamed: 'isInterface' put: false.MyObject instVarNamed: 'behavesLike' put: {}."Animal includes: Dog, Bird, Chicken	and behaves like: IAnimal""Dog includes: Puppy	and behaves like: IMamal""Bird behaves like: IAves""Chicken behaves like: IFarm IAves""Cow behaves like: IFarm IMamal""IFarm behaves like: IGround (all farm animals cant really fly)"(Smalltalk hasClassNamed: #Animal) ifTrue: [Smalltalk removeClassNamed: #Animal].(Smalltalk hasClassNamed: #Dog) ifTrue: [Smalltalk removeClassNamed: #Dog].(Smalltalk hasClassNamed: #Bird) ifTrue: [Smalltalk removeClassNamed: #Bird].(Smalltalk hasClassNamed: #Chicken) ifTrue: [Smalltalk removeClassNamed: #Chicken].(Smalltalk hasClassNamed: #Puppy) ifTrue: [Smalltalk removeClassNamed: #Puppy].(Smalltalk hasClassNamed: #Cow) ifTrue: [Smalltalk removeClassNamed: #Cow].(Smalltalk hasClassNamed: #IAnimal) ifTrue: [Smalltalk removeClassNamed: #IAnimal].(Smalltalk hasClassNamed: #IFarm) ifTrue: [Smalltalk removeClassNamed: #IFarm].(Smalltalk hasClassNamed: #IGround) ifTrue: [Smalltalk removeClassNamed: #IGround].(Smalltalk hasClassNamed: #IMamal) ifTrue: [Smalltalk removeClassNamed: #IMamal].(Smalltalk hasClassNamed: #IAves) ifTrue: [Smalltalk removeClassNamed: #IAves].! !!OOP3Tests methodsFor: 'testing' stamp: 'BT 12/3/2018 17:08'!testAAASubclass[MyObject subclass: #IAnimal isInterface: true behavesLike: {} instanceVariableNames: 'NumOfLegs' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.] on: AssertionFailure do: [:e| self assert: (e messageText ='Interfaces can not have state!!')].	MyObject subclass: #IAnimal isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.	MyObject subclass: #Animal isInterface: false behavesLike: {IAnimal} instanceVariableNames: 'numOfLegs' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.	[Animal subclass: #Dog isInterface: false behavesLike: {MyObject} instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.] on: AssertionFailure do: [:e| self assert: (e messageText ='Can not behave like a non-interface!!')].MyObject subclass: #IMamal isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.	Animal subclass: #Dog isInterface: false behavesLike: {IMamal} instanceVariableNames: 'type' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.[IAnimal subclass: #IAves isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'] on: AssertionFailure do:
[:e| self assert: (e messageText ='Interfaces must derive from MyObject!!')].[IAnimal subclass: #Bird instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'] on: AssertionFailure do:[:e| self assert: (e messageText ='Classes can not derive from an interface!!')].MyObject subclass: #IAves isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.Animal subclass: #Bird isInterface: false behavesLike: {IAves} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.	Dog subclass: #Puppy isInterface: false behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.! !!OOP3Tests methodsFor: 'testing' stamp: 'BT 12/3/2018 18:33'!testAmbiguitiesMyObject subclass: #IAnimal isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #IMamal isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #IAves isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #IGround isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #IFarm isInterface: true behavesLike: {IGround} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #Animal isInterface: false behavesLike: {IAnimal} instanceVariableNames: 'numOfLegs' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.Animal subclass: #Dog isInterface: false behavesLike: {IMamal. IGround} instanceVariableNames: 'type size' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.Animal subclass: #Bird isInterface: false behavesLike: {IAves} instanceVariableNames: 'eggs' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.Animal subclass: #Chicken isInterface: false behavesLike: {IAves. IFarm} instanceVariableNames: 'eggs' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.Animal subclass: #Cow isInterface: false behavesLike: {IMamal. IFarm} instanceVariableNames: 'milk' classVariableNames: '' poolDictionaries:''	category: 'OOP3'."now lets define functions"IAnimal compile: 'makeSound' where:#().IAnimal compile:'makeSound:something' where:#(String).IAnimal compile: 'setNumOfLegs:legs' where:#(Integer).IAnimal compile: 'getGender' where:#().IMamal compile:'setNumOfLegs:legs' where:#(Integer).IMamal compile:'makeSound' where:#().IMamal compile:'makeSound:something' where:#(String).IAves compile:'setNumOfLegs:legs' where:#(Integer).IAves compile:'getGender' where:#()."for mamal everything is ambiguities"self assert:((Dog ambiguities) size = 3).self assert:(((Cow ambiguities) at:1) = #makeSound).self assert:(((Cow ambiguities) at:2) = #makeSound:)."avel suppose to have 3 functions, 2 ambiguities"self assert:((Bird ambiguities) size = 2).self assert:(((Bird ambiguities) at:1) = #getGender).! !!OOP3Tests methodsFor: 'testing' stamp: 'BT 12/3/2018 12:52'!testBehavesLikeMyObject subclass: #IAnimal isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #IMamal isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.	MyObject subclass: #IAves isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.	MyObject subclass: #IGround isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.	MyObject subclass: #IFarm isInterface: true behavesLike: {IGround} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.	MyObject subclass: #Animal isInterface: false behavesLike: {IAnimal} instanceVariableNames: 'numOfLegs' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.Animal subclass: #Dog isInterface: false behavesLike: {IMamal. IGround} instanceVariableNames: 'type size' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.	Animal subclass: #Bird isInterface: false behavesLike: {IAves} instanceVariableNames: 'size' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.	Animal subclass: #Chicken isInterface: false behavesLike: {IAves. IFarm} instanceVariableNames: 'type' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.	Animal subclass: #Cow isInterface: false behavesLike: {IMamal. IFarm} instanceVariableNames: 'type' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.self assert:[Animal behavesLike includes: IAnimal].self assert:[Dog behavesLike includes: IMamal].self assert:[Dog behavesLike includes: IAnimal].self assert:[Bird behavesLike includes: IAnimal].self assert:[Bird behavesLike includes: IAves].self assert:[Cow behavesLike includes: IFarm].self assert:[Cow behavesLike includes: IGround].self assert:[IAnimal behavesLike includes: IAnimal].! !!OOP3Tests methodsFor: 'testing' stamp: 'BT 12/3/2018 17:06'!testCompile
|dog chicken cow|MyObject subclass: #IAnimal isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #IMamal isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #IAves isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #IGround isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #IFarm isInterface: true behavesLike: {IGround} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #Animal isInterface: false behavesLike: {IAnimal} instanceVariableNames: 'numOfLegs' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.Animal subclass: #Dog isInterface: false behavesLike: {IMamal. IGround} instanceVariableNames: 'type size' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.Animal subclass: #Bird isInterface: false behavesLike: {IAves} instanceVariableNames: 'eggs' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.Animal subclass: #Chicken isInterface: false behavesLike: {IAves. IFarm} instanceVariableNames: 'eggs' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.Animal subclass: #Cow isInterface: false behavesLike: {IMamal. IFarm} instanceVariableNames: 'milk' classVariableNames: '' poolDictionaries:''	category: 'OOP3'."now lets define functions"[IAnimal compile:'makeSound:dontneedargs' where:#()] on: AssertionFailure 	do:[:e| self assert: (e messageText ='Can not compile method, number of arguments is not equal to the number of constraints!!')].[IAnimal compile:'makeSoundTranscript show:(''Can an animal has default sound?'')' where:#()] on: AssertionFailure 	do:[:e| self assert: (e messageText ='Interfaces are not allowed to have methods that define behavior!!')].IAnimal compile: 'makeSound' where:#().IAnimal compile: 'setNumOfLegs:legs' where:#(Integer).Animal compile: 'setNumOfLegs:legsnumOfLegs:=legs' where:#(Integer)."dog does woof woof"Dog compile: 'makeSoundTranscript show:(''woof woof'')' where:#().dog := Dog new.dog makeSound.dog setNumOfLegs:4."chicken does baka baka"Chicken compile: 'makeSoundTranscript show:(''baka baka'')' where:#().Chicken compile: 'initialize
eggs:=0' where:#().chicken := Chicken new.chicken makeSound."cow says moo"Cow compile:'makeSoundTranscript show:(''moo'')' where:#().IAves compile: 'addEggs:eggs' where:#(Integer).Chicken compile: 'addEggs:numOfeggseggs:=eggs+numOfeggs' where:#(Integer).[chicken addEggs:'3'] on: AssertionFailure 	do:[:e| self assert: (e messageText ='Type mismatch!! Argument 1 should be Integer')].chicken addEggs:2.IFarm compile:'getStuff:amount andPrice:price' where:#(Integer Float).Cow compile: 'initializemilk:=50' where:#().Cow compile:'getStuff:amount andPrice:price|tempMilk|Transcript show:(amount asString,'' for: '',price asString).tempMilk:=milk."HooLaLa"milk:=tempMilk-amount.' where:#(Integer Number).Chicken compile:'getStuff:amount andPrice:price|tempEggs|Transcript show:(amount asString,'' for: '',price asString).tempEggs:=eggs."HooLaLa"eggs:=tempEggs-amount.' where:#(Integer Number).cow:= Cow new.[cow getStuff:10.3 andPrice:3] on: AssertionFailure 	do:[:e| self assert: (e messageText ='Type mismatch!! Argument 1 should be Integer')].[cow getStuff:10 andPrice:'10'] on: AssertionFailure 	do:[:e| self assert: (e messageText ='Type mismatch!! Argument 2 should be Number')].cow getStuff:10 andPrice:10.! !!OOP3Tests methodsFor: 'testing' stamp: 'BT 12/3/2018 19:00'!testIsImplementedMyObject subclass: #IAnimal isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #IMamal isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #IAves isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #IGround isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #IFarm isInterface: true behavesLike: {IGround} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #Animal isInterface: false behavesLike: {IAnimal} instanceVariableNames: 'numOfLegs' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.Animal subclass: #Dog isInterface: false behavesLike: {IMamal. IGround} instanceVariableNames: 'type size' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.Animal subclass: #Bird isInterface: false behavesLike: {IAves} instanceVariableNames: 'eggs' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.Animal subclass: #Chicken isInterface: false behavesLike: {IAves. IFarm} instanceVariableNames: 'eggs' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.Animal subclass: #Cow isInterface: false behavesLike: {IMamal. IFarm} instanceVariableNames: 'milk' classVariableNames: '' poolDictionaries:''	category: 'OOP3'."define interface functions"IAnimal compile: 'makeSound' where:#().IAnimal compile: 'setNumOfLegs:legs' where:#(Integer).IAves compile: 'addEggs:eggs' where:#(Integer)."dog implements IAnimal"Dog compile: 'makeSoundTranscript show:(''woof woof'')' where:#().Dog compile: 'setNumOfLegs:legsnumOfLegs:=legs' where:#(Integer).self assert:[IAnimal isImplemented]."nothing implements IAves"self deny:[IAves isImplemented]."oops, we cant implement non-interface"[Dog isImplemented] on: AssertionFailure 	do:[:e| self assert: (e messageText ='Dog is not an interface!!')].! !!OOP3Tests methodsFor: 'testing' stamp: 'BT 12/3/2018 13:09'!testIsKindOf|animal dog chicken puppy|MyObject subclass: #IAnimal isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #IMamal isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #IAves isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #IGround isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #IFarm isInterface: true behavesLike: {IGround} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #Animal isInterface: false behavesLike: {IAnimal} instanceVariableNames: 'numOfLegs' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.Animal subclass: #Dog isInterface: false behavesLike: {IMamal. IGround} instanceVariableNames: 'type size' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.Dog subclass: #Puppy isInterface: false behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.Animal subclass: #Bird isInterface: false behavesLike: {IAves} instanceVariableNames: 'size' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.Animal subclass: #Chicken isInterface: false behavesLike: {IAves. IFarm} instanceVariableNames: 'type' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.Animal subclass: #Cow isInterface: false behavesLike: {IMamal. IFarm} instanceVariableNames: 'type' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.	animal:= Animal new.dog:= Dog new.chicken:= Chicken new.puppy:= Puppy new.self assert:[dog isKindOf:Animal].self assert:[dog isKindOf:IAnimal].self assert:[animal isKindOf:IAnimal].self assert:[chicken isKindOf:IAves].self assert:[chicken isKindOf:IFarm].self deny:[chicken isKindOf:IMamal].self assert:[puppy isKindOf:Dog].self assert:[puppy isKindOf:Animal].self assert:[puppy isKindOf:IAnimal].self assert:[puppy isKindOf:IGround].! !!OOP3Tests methodsFor: 'testing' stamp: 'BT 12/3/2018 19:04'!testNew|animal dog ichicken achicken|MyObject subclass: #IAnimal isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #IMamal isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #IAves isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #IGround isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #IFarm isInterface: true behavesLike: {IGround} instanceVariableNames: '' classVariableNames: '' poolDictionaries: ''	category: 'OOP3'.MyObject subclass: #Animal isInterface: false behavesLike: {IAnimal} instanceVariableNames: 'numOfLegs' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.Animal subclass: #Dog isInterface: false behavesLike: {IMamal. IGround} instanceVariableNames: 'type size' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.Animal subclass: #Bird isInterface: false behavesLike: {IAves} instanceVariableNames: 'size' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.Animal subclass: #Chicken isInterface: false behavesLike: {IAves. IFarm} instanceVariableNames: 'type' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.Animal subclass: #Cow isInterface: false behavesLike: {IMamal. IFarm} instanceVariableNames: 'type' classVariableNames: '' poolDictionaries:''	category: 'OOP3'.	animal:= Animal new.animal instVarNamed: 'numOfLegs' put: 2.dog:= Dog new.dog instVarNamed: 'type' put: 'Lavrador'.dog instVarNamed: 'size' put: 'big'.[ichicken:= IFarm new] on: AssertionFailure 	do:[:e| self assert: (e messageText ='Interfaces can not be instantiated!!')].IFarm compile:'getStuff:amount andPrice:price' where:#(Integer Float).[achicken:= Animal new] on: AssertionFailure 	do:[:e| self assert: (e messageText ='Can not instantiate an Abstract class!!')].	(Smalltalk hasClassNamed: #Animal) ifTrue: [Smalltalk removeClassNamed: #Animal].(Smalltalk hasClassNamed: #Dog) ifTrue: [Smalltalk removeClassNamed: #Dog].(Smalltalk hasClassNamed: #Bird) ifTrue: [Smalltalk removeClassNamed: #Bird].(Smalltalk hasClassNamed: #Chicken) ifTrue: [Smalltalk removeClassNamed: #Chicken].(Smalltalk hasClassNamed: #Puppy) ifTrue: [Smalltalk removeClassNamed: #Puppy].(Smalltalk hasClassNamed: #Cow) ifTrue: [Smalltalk removeClassNamed: #Cow].(Smalltalk hasClassNamed: #IAnimal) ifTrue: [Smalltalk removeClassNamed: #IAnimal].(Smalltalk hasClassNamed: #IFarm) ifTrue: [Smalltalk removeClassNamed: #IFarm].(Smalltalk hasClassNamed: #IGround) ifTrue: [Smalltalk removeClassNamed: #IGround].(Smalltalk hasClassNamed: #IMamal) ifTrue: [Smalltalk removeClassNamed: #IMamal].(Smalltalk hasClassNamed: #IAves) ifTrue: [Smalltalk removeClassNamed: #IAves].	! !