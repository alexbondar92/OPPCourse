'From Squeak5.0 of 9 August 2016 [latest update: #15120] on 15 December 2018 at 6:43:02 pm'!TestCase subclass: #OOP3TESTS	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP3-TESTS'!!OOP3TESTS methodsFor: 'as yet unclassified' stamp: 'OG 12/14/2018 10:43'!setUpMyObject instVarNamed: 'isInterface' put: false.MyObject instVarNamed: 'behavesLike' put: {}.(Smalltalk hasClassNamed: #A) ifTrue: [Smalltalk removeClassNamed: #A].(Smalltalk hasClassNamed: #B) ifTrue: [Smalltalk removeClassNamed: #B].(Smalltalk hasClassNamed: #C) ifTrue: [Smalltalk removeClassNamed: #C].(Smalltalk hasClassNamed: #D) ifTrue: [Smalltalk removeClassNamed: #D].(Smalltalk hasClassNamed: #I1) ifTrue: [Smalltalk removeClassNamed: #I1].(Smalltalk hasClassNamed: #I2) ifTrue: [Smalltalk removeClassNamed: #I2].(Smalltalk hasClassNamed: #I3) ifTrue: [Smalltalk removeClassNamed: #I3].(Smalltalk hasClassNamed: #I4) ifTrue: [Smalltalk removeClassNamed: #I4].(Smalltalk hasClassNamed: #I5) ifTrue: [Smalltalk removeClassNamed: #I5].(Smalltalk hasClassNamed: #I6) ifTrue: [Smalltalk removeClassNamed: #I6].(Smalltalk hasClassNamed: #I7) ifTrue: [Smalltalk removeClassNamed: #I7].(Smalltalk hasClassNamed: #E) ifTrue: [Smalltalk removeClassNamed: #E].(Smalltalk hasClassNamed: #IE) ifTrue: [Smalltalk removeClassNamed: #IE].(Smalltalk hasClassNamed: #Dana) ifTrue: [Smalltalk removeClassNamed: #Dana].(Smalltalk hasClassNamed: #IA) ifTrue: [Smalltalk removeClassNamed: #IA].(Smalltalk hasClassNamed: #IB1) ifTrue: [Smalltalk removeClassNamed: #IB1].(Smalltalk hasClassNamed: #IB2) ifTrue: [Smalltalk removeClassNamed: #IB2].	MyObject subclass: #I4 isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.	MyObject subclass: #I5 isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.	MyObject subclass: #I7 isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.	MyObject subclass: #I6 isInterface: true behavesLike: {I7} instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.	MyObject subclass: #I1 isInterface: true behavesLike: {I4} instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.	MyObject subclass: #I3 isInterface: true behavesLike: {I4} instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.	MyObject subclass: #I2 isInterface: true behavesLike: {I5 . I6} instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.		MyObject subclass: #A isInterface: false behavesLike: {I1} instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.	A subclass: #B isInterface: false behavesLike: {I2} instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.	B subclass: #C isInterface: false behavesLike: {I3} instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.	C subclass: #D instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.		MyObject subclass: #IE isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.	MyObject subclass: #E isInterface: false behavesLike: {IE} instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.! !!OOP3TESTS methodsFor: 'as yet unclassified' stamp: 'OG 12/10/2018 20:43'!test7	self should: [I5 new] raise: AssertionFailure description: 'Interfaces can not be instantiated!!'.! !!OOP3TESTS methodsFor: 'as yet unclassified' stamp: 'OG 12/10/2018 21:22'!testAbstract		self shouldnt: [A new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self shouldnt: [C new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.		I7 compile: 'fi7'.	self shouldnt: [A new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self should: [B new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self should: [C new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self should: [D new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	E compile: 'fi7'.	self shouldnt: [A new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self should: [B new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self should: [C new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self should: [D new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self shouldnt: [E new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	     D compile: 'fi7'.	self should: [B new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self should: [C new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self shouldnt: [D new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.		     B compile: 'fi7'.	self shouldnt: [A new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self shouldnt: [B new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self shouldnt: [C new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self shouldnt: [D new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.		I5 compile: 'hi5'.	self shouldnt: [A new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self should: [B new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self should: [C new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self should: [D new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.		A compile: 'hi5'.	self shouldnt: [A new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self shouldnt: [B new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self shouldnt: [C new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self shouldnt: [D new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	I3 compile: 'fi3'.	self shouldnt: [A new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self shouldnt: [B new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self should: [C new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self should: [D new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.		D compile: 'fi3'.	self should: [C new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self shouldnt: [D new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.		I4 compile: 'fi3'.	self should: [A new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self should: [B new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self should: [C new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self shouldnt: [D new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.		B compile: 'fi3'.	self should: [A new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self shouldnt: [B new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self shouldnt: [C new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self shouldnt: [D new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.		I1 compile: 'gi1'.	self should: [A new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self should: [B new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self should: [C new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self should: [D new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.		C compile: 'gi1'.	self should: [A new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self should: [B new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self shouldnt: [C new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.	self shouldnt: [D new] raise: AssertionFailure description: 'Can not instantiate an Abstract class!!'.				! !!OOP3TESTS methodsFor: 'as yet unclassified' stamp: 'OG 12/14/2018 09:25'!testAmbiguities	I4 compile: 'f'.	self assert: (#(#f) asSortedCollection) equals: (A ambiguities).	self assert: (#(#f) asSortedCollection) equals: (I1 ambiguities).	self assert: (#() asSortedCollection) equals: (I4 ambiguities).		self assert: (#(#f) asSortedCollection) equals: (B ambiguities).	self assert: (#(#f) asSortedCollection) equals: (C ambiguities).		I6 compile: 'g'.	self assert: (#() asSortedCollection) equals: (I5 ambiguities). 	self assert: (#() asSortedCollection) equals: (I7 ambiguities). 	self assert: (#() asSortedCollection) equals: (I6 ambiguities). 	self assert: (#(#g) asSortedCollection) equals: (I2 ambiguities). 		self assert: (#(#f #g) asSortedCollection) equals: (B ambiguities).		I5 compile: 'a'.	self assert: (#(#a #f #g) asSortedCollection) equals: (C ambiguities).	self assert: (#(#a #g) asSortedCollection) equals: (I2 ambiguities).		A compile: 'a'.	self assert: (#(#f) asSortedCollection) equals: (A ambiguities).		IE compile: 'e'.	E compile: 'e'.	self assert: (#() asSortedCollection) equals: (E ambiguities). 			! !!OOP3TESTS methodsFor: 'as yet unclassified' stamp: 'OG 12/14/2018 09:34'!testAmbiguities2	(Smalltalk hasClassNamed: #IA) ifTrue: [Smalltalk removeClassNamed: #IA].	(Smalltalk hasClassNamed: #IB1) ifTrue: [Smalltalk removeClassNamed: #IB1].	(Smalltalk hasClassNamed: #IB2) ifTrue: [Smalltalk removeClassNamed: #IB2].	(Smalltalk hasClassNamed: #Dana) ifTrue: [Smalltalk removeClassNamed: #Dana].		MyObject subclass: #IA isInterface: true behavesLike: {} instanceVariableNames: '  ' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.	MyObject subclass: #IB1 isInterface: true behavesLike: {IA} instanceVariableNames: '  ' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.	MyObject subclass: #IB2 isInterface: true behavesLike: {IA} instanceVariableNames: '  ' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.	MyObject subclass: #Dana isInterface: false behavesLike: {IB1. IB2} instanceVariableNames: '  ' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.		self assert: (#() asSortedCollection) equals: (Dana ambiguities).	IA compile: 'f'.		self assert: (#(#f) asSortedCollection) equals: (Dana ambiguities).	self assert: (#(#f) asSortedCollection) equals: (IB1 ambiguities).	self assert: (#(#f) asSortedCollection) equals: (IB2 ambiguities).	self assert: (#() asSortedCollection) equals: (IA ambiguities).		Dana compile: 'f'.		self assert: (#() asSortedCollection) equals: (IA ambiguities).		IB1 compile: 'g'.	self assert: (#(#f) asSortedCollection) equals: (Dana ambiguities).		! !!OOP3TESTS methodsFor: 'as yet unclassified' stamp: 'OG 12/3/2018 16:09'!testBehaves	| set1 set2|	set1:=Set new.		set2:=Set new.			self assert: (MyObject behavesLike=set1).		set1 add: I4.	self assert:  (I4 behavesLike=set1).	set1 add: I1.	self assert: (I1 behavesLike=set1).	self assert: (A behavesLike=set1).		set2 add: I5.	set2 add: I2.	set2 add: I6.	set2 add: I7.	self assert:  (I2 behavesLike=set2).		set1:= (set1 union: set2).	self assert:  (B behavesLike=set1).	set1 add: I3.	self assert:  (C behavesLike=set1).	self assert:  (D behavesLike=set1).	! !!OOP3TESTS methodsFor: 'as yet unclassified' stamp: 'OG 12/10/2018 21:13'!testCompile	| a1 temp |	MyObject subclass: #A instanceVariableNames: '' classVariableNames: '' poolDictionaries: 	''	category: 'OOP3'.	A subclass: #B instanceVariableNames: '' classVariableNames: '' poolDictionaries: 	''	category: 'OOP3'.	A compile:	'foo:a bar: b baz: c	| var1 |	var1 := a + c + (2 * b).	"just a comment, nothing special"	^ (var1 * var1)'	where: #(Integer nil Number).		a1:= A new.	a1 foo: 1 bar: 2 baz: 3.	a1 foo: 1 bar: '2' baz: 3.	self should: [a1 foo: $r bar: 2 baz:1] raise: AssertionFailure description: 'Type mismatch!! Argument 1 should be Integer'.	self should: [a1 foo: '1' bar: 2 baz:$e] raise: AssertionFailure description: 'Type mismatch!! Argument 1 should be Integer'.		A compile:	'fNoArgs	"my comment"	^3'	where:#().	self assert: 3 equals: (a1 fNoArgs).		A compile:	'fOneArg: guz	^guz'	where:#(String).		self should: [a1 fOneArg: 1] raise: AssertionFailure description: 'Type mismatch!! Argument 1 should be String'.	self assert: 'hey' equals: (a1 fOneArg: 'hey').		A compile:	'fWithNium: ls	ls do: [:ele | ^4].	^2'	where: #(Set).	temp := Set new.	temp add: 2.	self assert: 4 equals: (a1 fWithNium: temp).		A compile:	'fWithEmptyVars	||	'	where: #().		self should: [A compile: 'f' where: #(Integer)] raise: AssertionFailure description: 	'Can not compile method, number of arguments is not equal to the number of constraints!!'.		self should: [I1 compile: 		'f: a		|bla|		bla:=3.'		 ] raise: AssertionFailure description: 	'Interfaces are not allowed to have methods that define behavior!!'.		self shouldnt: [I1 compile: 'f: a' ] raise: AssertionFailure description: 	'Interfaces are not allowed to have methods that define behavior!!'.		self shouldnt: [A compile: 		'g: a		|bla|		bla:=3.'		 ] raise: AssertionFailure description: 	'Interfaces are not allowed to have methods that define behavior!!'.! !!OOP3TESTS methodsFor: 'as yet unclassified' stamp: 'OG 12/10/2018 20:56'!testImplemented	self assert: (I4 isImplemented).		self should: [A isImplemented] raise: AssertionFailure description: 'A is not an interface!!'.		I3 compile: 'fi3'.	self assert: (I4 isImplemented).	self assert: (I3 isImplemented not).		I5 compile: 'gi5'.	self assert: (I6 isImplemented).	self assert: (I2 isImplemented not).	self assert: (I5 isImplemented not).		E compile: 'gi5'.	self assert: (I5 isImplemented not).	A compile: 'gi5'.	self assert: (I5 isImplemented).	self assert: (I2 isImplemented).		B compile: 'b'.	self assert: (I5 isImplemented).	self assert: (I2 isImplemented).	self assert: (I6 isImplemented).	self assert: (I1 isImplemented).			self should: [D isImplemented] raise: AssertionFailure description: 'D is not an interface!!'! !!OOP3TESTS methodsFor: 'as yet unclassified' stamp: 'OG 12/14/2018 10:00'!testImplemented2	I4 compile: 'f'.	self deny: (I4 isImplemented).	self deny: (I1 isImplemented). "TODO"		self assert: (IE isImplemented). ! !!OOP3TESTS methodsFor: 'as yet unclassified' stamp: 'OG 12/3/2018 15:55'!testIsInterface	self assert: (I1 isInterface).	self assert: (I4 isInterface).	self assert: (D isInterface not).	self assert: (B isInterface not).	self assert: (MyObject isInterface not).	! !!OOP3TESTS methodsFor: 'as yet unclassified' stamp: 'OG 12/10/2018 21:33'!testKindOf| a b c d e|	a:= A new.	b:= B new.	c:= C new.	d:= D new.	e:= E new.	self assert: (3 isKindOf: Number).		self assert: (e isKindOf: IE).	self deny: (e isKindOf: I4).	self deny: (e isKindOf: B).		self assert: (a isKindOf: A).	self assert: (a isKindOf: I4).	self deny: (a isKindOf: I6).		self assert: (b isKindOf: Object).	self assert: (b isKindOf: MyObject).	self assert: (b isKindOf: A).	self deny: (b isKindOf: I3).	self assert: (b isKindOf: I1).	self assert: (b isKindOf: I7).		self assert: (c isKindOf: A).	self assert: (c isKindOf: I1).	self assert: (c isKindOf: I4).	self assert: (c isKindOf: I5).	self deny: (c isKindOf: D).		self assert: (d isKindOf: C).	self assert: (d isKindOf: A).	self assert: (d isKindOf: D).	self assert: (d isKindOf: I7).	self assert: (d isKindOf: I3).	self deny: (d isKindOf: IE).					! !!OOP3TESTS methodsFor: 'as yet unclassified' stamp: 'OG 12/3/2018 15:19'!testSubClass	| a1 temp |	MyObject subclass: #A instanceVariableNames: '' classVariableNames: '' poolDictionaries: 	''	category: 'OOP3'.	A subclass: #B instanceVariableNames: '' classVariableNames: '' poolDictionaries: 	''	category: 'OOP3'.	A compile:	'foo:a bar: b baz: c	| var1 |	var1 := a + c + (2 * b).	"just a comment, nothing special"	^ (var1 * var1)'	where: #(Integer nil Number).		a1:= A new.	a1 foo: 1 bar: 2 baz: 3.	a1 foo: 1 bar: '2' baz: 3.	self should: [a1 foo: $r bar: 2 baz:1] raise: AssertionFailure description: 'Type mismatch!! Argument 1 should be Integer'.	self should: [a1 foo: '1' bar: 2 baz:$e] raise: AssertionFailure description: 'Type mismatch!! Argument 1 should be Integer'.		A compile:	'fNoArgs	"my comment"	^3'	where:#().	self assert: 3 equals: (a1 fNoArgs).		A compile:	'fOneArg: guz	^guz'	where:#(String).		self should: [a1 fOneArg: 1] raise: AssertionFailure description: 'Type mismatch!! Argument 1 should be String'.	self assert: 'hey' equals: (a1 fOneArg: 'hey').		A compile:	'fWithNium: ls	ls do: [:ele | ^4].	^2'	where: #(Set).	temp := Set new.	temp add: 2.	self assert: 4 equals: (a1 fWithNium: temp).		A compile:	'fWithEmptyVars	||'	where: #().		a1 fWithEmptyVars.		self should: [A compile: 'f' where: #(Integer)] raise: AssertionFailure description: 	'Can not compile method, number of arguments is not equal to the number of constraints!!'.		! !